#!/usr/bin/env node

/*
 * Copyright (C) 2014-2016 University of Stuttgart
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('fancy:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort('3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

var client = app.get('elastic');
var units ={};
/**
 * Set units and store in express
 */
 client.search({
        index: 'mf',
        type: 'metrics',
        size: 2000
    }, function(error, response) {
      if (error) {
        if (response.status != 400) {
          return;
        }
      }
      var results = response.hits.hits;
      var keys = Object.keys(results);
      keys.forEach(function(key) {
            var item = results[key]._source;
            var id = results[key]._id;
            units[id] = item.unit;
          });
      app.set('units', units);
      /**
      * Listen on provided port, on all network interfaces.
      */
      server.listen(port);
      server.on('error', onError);
      server.on('listening', onListening);
    });

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
